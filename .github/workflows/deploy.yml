name: Deploy Website

on:
  push:
    branches: [main]
    paths:
      - 'fortunato-website/**'
      - 'config/site.yaml'
      - 'terraform/**'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'
        terraform_wrapper: false

    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: us-east-1

    - name: Terraform Init & Plan
      working-directory: terraform
      run: |
        terraform init
        terraform plan -out=tfplan -no-color

    - name: Check for Destructive Changes
      working-directory: terraform
      run: |
        PLAN_OUTPUT=$(terraform show -no-color tfplan)
        DESTROY_COUNT=$(echo "$PLAN_OUTPUT" | grep -c "will be destroyed" || echo "0")
        
        if [ "$DESTROY_COUNT" -gt 0 ]; then
          echo "üö® WARNING: $DESTROY_COUNT resource(s) will be DESTROYED!"
          echo "$PLAN_OUTPUT" | grep -A 1 -B 1 "will be destroyed"
          
          if [[ "${{ github.event.head_commit.message }}" != *"ALLOW_DESTROY"* ]]; then
            echo "‚ùå Add 'ALLOW_DESTROY' to commit message to proceed"
            exit 1
          else
            echo "‚ö†Ô∏è ALLOW_DESTROY found - proceeding with destructive changes"
          fi
        fi

    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve tfplan

    - name: Get Outputs
      id: terraform
      working-directory: terraform
      run: |
        echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
        echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
        
        # Get CloudFront distribution ID (may not exist)
        DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
        echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

    - name: Upload Website Files
      run: |
        echo "üì§ Uploading website files to S3..."
        aws s3 sync fortunato-website/ s3://${{ steps.terraform.outputs.s3_bucket }}/ \
          --delete \
          --exclude "*.md"

    - name: Invalidate CloudFront Cache
      if: steps.terraform.outputs.distribution_id != ''
      run: |
        echo "üîÑ Invalidating CloudFront cache..."
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.terraform.outputs.distribution_id }} \
          --paths "/*"

    - name: Test Website
      run: |
        echo "üß™ Testing website..."
        sleep 10
        
        URL="${{ steps.terraform.outputs.website_url }}"
        if curl -f -s "$URL" > /dev/null; then
          echo "‚úÖ Website is accessible: $URL"
        else
          echo "‚ö†Ô∏è Website may still be propagating: $URL"
        fi

    - name: Summary
      run: |
        echo "## ‚úÖ Deployment Complete!"
        echo ""
        echo "**Website URL:** ${{ steps.terraform.outputs.website_url }}"
        echo "**S3 Bucket:** ${{ steps.terraform.outputs.s3_bucket }}"
        echo ""
        echo "üåê **DNS Setup:**"
        echo "Point your domain DNS to: \`$(echo '${{ steps.terraform.outputs.website_url }}' | sed 's|https://||')\`"
        echo ""
        echo "**CNAME Records:**"
        echo "- @ ‚Üí $(echo '${{ steps.terraform.outputs.website_url }}' | sed 's|https://||')"
        echo "- www ‚Üí $(echo '${{ steps.terraform.outputs.website_url }}' | sed 's|https://||')"